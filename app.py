import os
import asyncio
from flask import Flask, request, Response
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TG_TOKEN = os.environ.get("TG_BOT_TOKEN", "8213431004:AAEZX0ZFe44fD92YScxw-GOvEKQDwY_-fp8")
KOYEB_HOST = os.environ.get("KOYEB_HOST")
WEBHOOK_PATH = f"/webhook/{TG_TOKEN}"
WEBHOOK_URL = f"https://{KOYEB_HOST}{WEBHOOK_PATH}" if KOYEB_HOST else None

TARGET_CHAT_ID = int(os.environ.get("TARGET_CHAT_ID", "-4658562147"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=TG_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class ReportForm(StatesGroup):
    nickname = State()
    date = State()
    activity = State()
    proof = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")]
    ],
    resize_keyboard=True
)

activity_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–§–ì")],
        [KeyboardButton(text="–ó–ë")],
        [KeyboardButton(text="–í—ã—à–∫–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç:", reply_markup=main_menu)

# === –ù–∞—á–∞–ª–æ –æ—Ç—á—ë—Ç–∞ ===
@dp.message(lambda m: m.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
async def start_report(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ReportForm.nickname)

# === –ù–∏–∫ ===
@dp.message(ReportForm.nickname)
async def set_nickname(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.10.2025):")
    await state.set_state(ReportForm.date)

# === –î–∞—Ç–∞ ===
@dp.message(ReportForm.date)
async def set_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_kb)
    await state.set_state(ReportForm.activity)

# === –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ===
@dp.message(ReportForm.activity)
async def set_activity(message: types.Message, state: FSMContext):
    if message.text not in ["–§–ì", "–ó–ë", "–í—ã—à–∫–∞"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –§–ì / –ó–ë / –í—ã—à–∫–∞")
        return
    await state.update_data(activity=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ReportForm.proof)

# === –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ ===
@dp.message(ReportForm.proof)
async def finish_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    report_text = (
        f"üìã *–ù–æ–≤—ã–π –æ—Ç—á—ë—Ç:*\n"
        f"üë§ –û—Ç: @{message.from_user.username or '–ë–µ–∑_–Ω–∏–∫–∞'}\n"
        f"üéÆ –ù–∏–∫: {data['nickname']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}"
    )

    try:
        if message.photo:
            await bot.send_photo(TARGET_CHAT_ID, message.photo[-1].file_id, caption=report_text, parse_mode="Markdown")
        elif message.video:
            await bot.send_video(TARGET_CHAT_ID, message.video.file_id, caption=report_text, parse_mode="Markdown")
        else:
            await bot.send_message(TARGET_CHAT_ID, f"{report_text}\nüìé {message.text or '‚Äî'}", parse_mode="Markdown")
        await message.answer("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_menu)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")

    await state.clear()

# === Flask ===
@app.route("/")
def index():
    return "Bot is running!"

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    update = types.Update(**request.get_json(force=True))
    asyncio.run(dp.feed_update(bot, update))
    return Response(status=200)

# === Webhook ===
async def on_startup():
    if WEBHOOK_URL:
        await bot.delete_webhook()
        await bot.set_webhook(WEBHOOK_URL)
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

try:
    asyncio.get_event_loop().run_until_complete(on_startup())
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", e)