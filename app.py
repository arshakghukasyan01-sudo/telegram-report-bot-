import os
import asyncio
from flask import Flask, request, Response
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TG_TOKEN = os.environ["TG_BOT_TOKEN"]
KOYEB_HOST = os.environ.get("KOYEB_HOST")  # –Ω–∞–ø—Ä–∏–º–µ—Ä your-app.koyeb.app
WEBHOOK_PATH = f"/webhook/{TG_TOKEN}"
WEBHOOK_URL = f"https://{KOYEB_HOST}{WEBHOOK_PATH}" if KOYEB_HOST else None
TARGET_CHAT_ID = int(os.environ.get("TARGET_CHAT_ID", "0"))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=TG_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class ReportForm(StatesGroup):
    nickname = State()
    date = State()
    activity = State()
    proof = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu = ReplyKeyboardMarkup([[KeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")]], resize_keyboard=True)
activity_kb = ReplyKeyboardMarkup(
    [[KeyboardButton("–§–ì")], [KeyboardButton("–ó–ë")], [KeyboardButton("–í—ã—à–∫–∞")]],
    resize_keyboard=True, one_time_keyboard=True
)

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç.", reply_markup=main_menu)

@dp.message(lambda m: m.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
async def start_report(m: types.Message, state: FSMContext):
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ReportForm.nickname)

@dp.message(ReportForm.nickname)
async def set_nick(m: types.Message, state: FSMContext):
    await state.update_data(nickname=m.text)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.10.2025):")
    await state.set_state(ReportForm.date)

@dp.message(ReportForm.date)
async def set_date(m: types.Message, state: FSMContext):
    await state.update_data(date=m.text)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_kb)
    await state.set_state(ReportForm.activity)

@dp.message(ReportForm.activity)
async def set_activity(m: types.Message, state: FSMContext):
    if m.text not in ["–§–ì", "–ó–ë", "–í—ã—à–∫–∞"]:
        await m.answer("–í—ã–±–µ—Ä–∏: –§–ì / –ó–ë / –í—ã—à–∫–∞")
        return
    await state.update_data(activity=m.text)
    await m.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Å—ã–ª–∫–∞):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ReportForm.proof)

@dp.message(ReportForm.proof)
async def finish(m: types.Message, state: FSMContext):
    data = await state.get_data()
    report = (
        f"üìã *–ù–æ–≤—ã–π –æ—Ç—á—ë—Ç:*\n"
        f"üë§ @{m.from_user.username or '–ë–µ–∑_–Ω–∏–∫–∞'}\n"
        f"üéÆ –ù–∏–∫: {data['nickname']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
    )
    if m.photo:
        await bot.send_photo(TARGET_CHAT_ID or m.chat.id, m.photo[-1].file_id, caption=report, parse_mode="Markdown")
    elif m.video:
        await bot.send_video(TARGET_CHAT_ID or m.chat.id, m.video.file_id, caption=report, parse_mode="Markdown")
    else:
        proof = m.text or "‚Äî"
        await bot.send_message(TARGET_CHAT_ID or m.chat.id, report + f"üìé {proof}", parse_mode="Markdown")
    await m.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_menu)
    await state.clear()

# === Flask –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route("/")
def index():
    return "OK"

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    update = types.Update(**request.get_json(force=True))
    asyncio.run(dp.feed_update(bot, update))
    return Response(status=200)

# === –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook ===
async def on_startup():
    if WEBHOOK_URL:
        await bot.delete_webhook()
        await bot.set_webhook(WEBHOOK_URL)
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

try:
    asyncio.get_event_loop().run_until_complete(on_startup())
except Exception as e:
    print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)
